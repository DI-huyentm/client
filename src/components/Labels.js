// src/LabelsPage.js

import React, { useState } from 'react';
import { Box, Typography, Button, Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TablePagination,FormControl,InputLabel,MenuItem,Select, TextField } from '@mui/material';
import EmptyLabel from "../images/empty-label.png"

const data = [
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484844, "URL": "http....", "Created Time": "2023-11-17 07:10:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484845, "URL": "http....", "Created Time": "2023-11-17 07:15:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484846, "URL": "http....", "Created Time": "2023-11-17 07:20:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484847, "URL": "http....", "Created Time": "2023-11-17 07:25:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484848, "URL": "http....", "Created Time": "2023-11-17 07:30:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484849, "URL": "http....", "Created Time": "2023-11-17 07:35:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484850, "URL": "http....", "Created Time": "2023-11-17 07:40:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484851, "URL": "http....", "Created Time": "2023-11-17 07:45:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484852, "URL": "http....", "Created Time": "2023-11-17 07:50:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484853, "URL": "http....", "Created Time": "2023-11-17 07:55:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484854, "URL": "http....", "Created Time": "2023-11-17 08:00:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484855, "URL": "http....", "Created Time": "2023-11-17 08:05:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484856, "URL": "http....", "Created Time": "2023-11-17 08:10:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484857, "URL": "http....", "Created Time": "2023-11-17 08:15:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484858, "URL": "http....", "Created Time": "2023-11-17 08:20:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484859, "URL": "http....", "Created Time": "2023-11-17 08:25:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484860, "URL": "http....", "Created Time": "2023-11-17 08:30:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484861, "URL": "http....", "Created Time": "2023-11-17 08:35:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484862, "URL": "http....", "Created Time": "2023-11-17 08:40:22", "Generated By": "LocNP5" },
  { "GitLab Repo": "update: s3 admin", "Project ID": 858484863, "URL": "http....", "Created Time": "2023-11-17 08:45:22", "Generated By": "LocNP5" }
];

const LabelsPage = () => {
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [action, setAction] = useState("display");

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const displayData = data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);

  return (
    <Box sx={{ padding: '2rem' , m:6}}>
      <Paper elevation={3} sx={{ p: '1rem' }}>
        <Grid container spacing={1}>
          <Grid item xs={6}>
            <Typography variant="h5" component="h1" sx={{ color: '#262626' }} gutterBottom>
              Labels
            </Typography>
            <Typography variant="body1" sx={{ color: '#595959', marginBottom: '1rem' }}>
              Create and customize labels for better categorization.
            </Typography>
          </Grid>
          <Grid item xs={6} container flexDirection="row" justifyContent="flex-end" alignItems="center">
            <Grid item>
              <Button variant="contained" sx={{ background: "#0052CC" }} size='small' onClick={()=>setAction("create")}>
                Generate Label
              </Button>
            </Grid>
          </Grid>
        </Grid>
      </Paper>

      { action === "display" && <Box sx={{ marginTop: '2rem' }}>
        
        <Paper elevation={3} sx={{ p: '1rem' }}>
        <Typography variant="h5" component="h2" gutterBottom>
          History
        </Typography>

        {data.length > 0 && <>
            <TableContainer>
            <Table sx={{ minWidth: 650, border: '1px solid #e0e0e0' }} aria-label="simple table">
              <TableHead>
                <TableRow>
                  <TableCell sx={{ fontWeight: 'bold' }}>GitLab Repo</TableCell>
                  <TableCell sx={{ fontWeight: 'bold' }}>Project ID</TableCell>
                  <TableCell sx={{ fontWeight: 'bold' }}>URL</TableCell>
                  <TableCell sx={{ fontWeight: 'bold' }}>Created Time</TableCell>
                  <TableCell sx={{ fontWeight: 'bold' }}>Generated By</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {displayData.map((row, index) => (
                  <TableRow key={index} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                    <TableCell>{row['GitLab Repo']}</TableCell>
                    <TableCell>{row['Project ID']}</TableCell>
                    <TableCell>{row['URL']}</TableCell>
                    <TableCell>{row['Created Time']}</TableCell>
                    <TableCell>{row['Generated By']}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>


          <TablePagination
            rowsPerPageOptions={[5, 10, 15]}
            component="div"
            count={data.length}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={handleChangePage}
            onRowsPerPageChange={handleChangeRowsPerPage}
          /></>}

        {data.length === 0 && <>

        <Paper elevation={3} sx={{ p: '1rem' }}>
        <Grid container justifyContent="center">
          <Grid item container xs={3} p={3} gap={1}>
            <Grid item xs={3}>
                <img src={EmptyLabel} style={{minHeight:"120px" , objectFit:"cover"}}></img>
            </Grid>
            <Grid xs={6} item container flexDirection="column" >
                <Grid item >
                    <Typography variant="h5" component="h2" sx={{ color: '#262626' }} gutterBottom>
                        It’s empty here.
                    </Typography>
                </Grid>
                <Grid item >
                    <Typography variant="body1" sx={{ color: '#595959', marginBottom: '1rem' }}>
                        Let’s create your Label.
                    </Typography>
                </Grid>
                <Grid item >
                    <Button variant="outlined" size='small'>
                        Generate Label
                    </Button>
                </Grid>
            </Grid>
          </Grid>
        </Grid>
      </Paper>


        </>}

            
        </Paper>
      </Box>}

      {action === "create" && 
<Box sx={{ marginTop: '2rem' }}>
  <Paper elevation={3} sx={{ p: '1rem' }}>
    {/* FORM CONTAINER */}
    <form>
      <Grid container spacing={2} sx={{ width: "40%" }}>
        {/* URL */}
        <Grid item xs={12}>
          <Typography variant="body1" gutterBottom sx={{ fontWeight: 'bold' }}>
            URL <span style={{color:"red"}}>*</span>
          </Typography>
          <TextField
            name="url"
            // value={formData.url}
            // onChange={handleChange}
            fullWidth
            variant="outlined"
            required
            size='small'
          />
        </Grid>
        {/* Access Token */}
        <Grid item xs={12}>
          <Typography variant="body1" gutterBottom sx={{ fontWeight: 'bold' }}>
            Access Token <span style={{color:"red"}}>*</span>
          </Typography>
          <TextField
            name="accessToken"
            // value={formData.accessToken}
            // onChange={handleChange}
            fullWidth
            variant="outlined"
            required
            size='small'
          />
        </Grid>
        {/* Project ID */}
        <Grid item xs={12}>
          <Typography variant="body1" gutterBottom sx={{ fontWeight: 'bold' }}>
            Project ID <span style={{color:"red"}}>*</span>
          </Typography>
          <TextField
            name="projectId"
            // value={formData.projectId}
            // onChange={handleChange}
            fullWidth
            variant="outlined"
            required
            size='small'
          />
        </Grid>
        
        {/* CD */}

        <Grid item xs={12}>
        <Typography variant="body1" gutterBottom sx={{ fontWeight: 'bold' }}>
            Label
          </Typography>
        </Grid>

        <Grid item xs={6}>
          <Typography variant="body1" gutterBottom>
            CD
          </Typography>
          <FormControl fullWidth variant="outlined">
            <Select
              name="cd"
              // value={formData.cd}
              // onChange={handleChange}
              labelId="cd-select-label"
              label="CD"
              size='small'
            >
              <MenuItem value="Conformance Problem">Conformance Problem</MenuItem>
              <MenuItem value="Code Readability Problem">Code Readability Problem</MenuItem>
              <MenuItem value="Data Error Problem">Data Error Problem</MenuItem>
              <MenuItem value="Error Handling Problem">Error Handling Problem</MenuItem>
              <MenuItem value="Inconsistant Requirement">Inconsistant Requirement</MenuItem>
              <MenuItem value="Interface Problem">Interface Problem</MenuItem>
              <MenuItem value="Logical Problem">Logical Problem</MenuItem>
              <MenuItem value="Memory Problem">Memory Problem</MenuItem>
              <MenuItem value="Performance Problem">Performance Problem</MenuItem>
              <MenuItem value="Reusability Problem">Reusability Problem</MenuItem>



            </Select>
          </FormControl>
        </Grid>
        {/* DS */}
        <Grid item xs={6}>
          <Typography variant="body1" gutterBottom>
            DS
          </Typography>
          <FormControl fullWidth variant="outlined">
            <Select
              name="ds"
              // value={formData.ds}
              // onChange={handleChange}
              labelId="ds-select-label"
              label="DS"
              size='small'
            >
              <MenuItem value="Critical">Critical</MenuItem>
              <MenuItem value="Major">Major</MenuItem>
              <MenuItem value="Minor">Minor</MenuItem>

            </Select>
          </FormControl>
        </Grid>
        {/* Buttons */}
        
      </Grid>

      <Grid item container justifyContent="flex-end" mt={50} gap={2}>
          <Grid item>
            <Button variant="outlined" onClick={() => setAction("display")}>
              Cancel
            </Button>
          </Grid>
          <Grid item>
            <Button type="submit" variant="contained" color="primary">
              Create
            </Button>
          </Grid>
        </Grid>
    </form>
  </Paper>
</Box>}
    </Box>
  );
};

export default LabelsPage;
